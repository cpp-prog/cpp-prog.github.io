<h1>C++ - Область переменных</h1>

<div class="tutorial-content">
<p>Область переменной является областью программы, где переменные могут быть объявлены:</p>

<ul>
	<li>Внутри функции или блока, который называется локальными переменными,</li>
	<li>В определении параметров функции, которые называются формальными параметрами.</li>
	<li>Вне всех функций, которые называются глобальными переменными.</li>
</ul>

<h2>Локальные переменные</h2>

<p>Переменные, объявленные внутри функции или блока, являются локальными переменными.&nbsp;Они могут использоваться только операторами, которые находятся внутри этой функции или блока кода.&nbsp;Локальные переменные не известны функциям вне их собственных.&nbsp;Ниже приведен пример использования локальных переменных:&nbsp;</p>

<blockquote>
<pre>
<code>#include &lt;iostream&gt;
using namespace std;
 
int main () {
   // Local variable declaration:
   int a, b;
   int c;
 
   // actual initialization
   a = 10;
   b = 20;
   c = a + b;
 
   cout &lt;&lt; c;
 
   return 0;
}</code></pre>
</blockquote>

<h2>Глобальные переменные</h2>

<p>Глобальные переменные определяются вне всех функций, обычно поверх программы.&nbsp;Глобальные переменные будут сохранять свою ценность на протяжении всей вашей программы.</p>

<p>Доступ к глобальной переменной можно получить любой функцией.&nbsp;То есть глобальная переменная доступна для использования во всей вашей программе после ее объявления.&nbsp;Ниже приведен пример использования глобальных и локальных переменных:</p>

<blockquote>
<pre>
<code>#include &lt;iostream&gt;
using namespace std;
 
// Global variable declaration:
int g;
 
int main () {
   // Local variable declaration:
   int a, b;
 
   // actual initialization
   a = 10;
   b = 20;
   g = a + b;
  
   cout &lt;&lt; g;
 
   return 0;
}</code></pre>
</blockquote>

<p>Программа может иметь одно и то же имя для локальных и глобальных переменных, но предпочтение будет отдавать значение локальной переменной внутри функции.&nbsp;Например:</p>

<blockquote>
<pre>
<code>#include &lt;iostream&gt;
using namespace std;
 
// Global variable declaration:
int g = 20;
 
int main () {
   // Local variable declaration:
   int g = 10;
 
   cout &lt;&lt; g;
 
   return 0;
}</code></pre>
</blockquote>

<p>Когда приведенный выше код компилируется и выполняется, он производит следующий результат:</p>

<blockquote>
<pre>
<code>10</code></pre>
</blockquote>

<h2>Инициализация локальных и глобальных переменных</h2>

<p>Когда локальная переменная определена, она не инициализируется системой, вы должны ее инициализировать самостоятельно.&nbsp;Глобальные переменные автоматически инициализируются системой, когда вы определяете их следующим образом:</p>

<table style="width:100%">
	<tbody>
		<tr>
			<th>Data Type</th>
			<th>Initializer</th>
		</tr>
		<tr>
			<td>int</td>
			<td>0</td>
		</tr>
		<tr>
			<td>char</td>
			<td>&#39;\0&#39;</td>
		</tr>
		<tr>
			<td>float</td>
			<td>0</td>
		</tr>
		<tr>
			<td>double</td>
			<td>0</td>
		</tr>
		<tr>
			<td>pointer</td>
			<td>NULL</td>
		</tr>
	</tbody>
</table>

<p>Хорошая практика программирования - правильно инициализировать переменные, иначе программа может вызвать неожиданный результат.</p>
</div>
