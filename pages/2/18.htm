<h1>C++ - Указатели</h1>

<div class="tutorial-content">
<p>C ++ указатели легко и интересно учиться.&nbsp;Некоторые задачи C ++ легче выполняются с указателями, а другие задачи C ++, такие как распределение динамической памяти, не могут выполняться без них.</p>

<p>Как вы знаете, каждая переменная является местом памяти, и каждая ячейка памяти имеет свой адрес, который можно получить, используя оператор ampersand (&amp;), который обозначает адрес в памяти.&nbsp;Рассмотрим следующее, которое будет печатать адрес определенных переменных -</p>

<blockquote>
<pre>
<code>#include &lt;iostream&gt;

using namespace std;
int main () {
   int  var1;
   char var2[10];

   cout &lt;&lt; &quot;Address of var1 variable: &quot;;
   cout &lt;&lt; &amp;var1 &lt;&lt; endl;

   cout &lt;&lt; &quot;Address of var2 variable: &quot;;
   cout &lt;&lt; &amp;var2 &lt;&lt; endl;

   return 0;
}</code></pre>
</blockquote>

<p>Когда приведенный выше код компилируется и выполняется, он производит следующий результат:</p>

<blockquote>
<pre>
<code>Address of var1 variable: 0xbfebd5c0
Address of var2 variable: 0xbfebd5b6</code></pre>
</blockquote>

<h2>Что такое указатели?</h2>

<p><strong>Указатель</strong>&nbsp;является переменной, значение которого является адрес другой переменной.&nbsp;Как и любая переменная или константа, вы должны объявить указатель, прежде чем сможете с ним работать.&nbsp;Общая форма объявления переменной указателя -</p>

<pre>
<code>type *var-name;</code></pre>

<p>Здесь&nbsp;<strong>тип</strong>&nbsp;- это базовый тип указателя;&nbsp;он должен быть допустимым типом C ++, а&nbsp;<strong>var-name</strong>&nbsp;- это имя переменной-указателя.&nbsp;Звездочкой, которую вы использовали для объявления указателя, является та же самая звездочка, которую вы используете для умножения.&nbsp;Однако в этом утверждении звездочка используется для обозначения переменной как указателя.&nbsp;Ниже приведена действительная декларация указателя -</p>

<blockquote>
<pre>
<code>int    *ip;    // pointer to an integer
double *dp;    // pointer to a double
float  *fp;    // pointer to a float
char   *ch     // pointer to character</code></pre>
</blockquote>

<p>Фактический тип данных для всех указателей, будь то целое число, float, character или other, является тем же самым, длинным шестнадцатеричным числом, которое представляет адрес памяти.&nbsp;Единственное различие между указателями разных типов данных - это тип данных переменной или константы, на которые указывает указатель.</p>

<h2>Использование указателей в C ++</h2>

<p>Существует несколько важных операций, которые мы будем делать с указателями очень часто.&nbsp;<strong>(a)</strong>&nbsp;Мы определяем переменную указателя.&nbsp;<strong>(b)</strong>Назначьте адрес переменной указателю.&nbsp;<strong>(c)</strong>&nbsp;Наконец, получите доступ к значению по адресу, доступному в переменной указателя.&nbsp;Это делается с помощью унарного оператора *, который возвращает значение переменной, расположенную по адресу, указанному его операндом.&nbsp;В следующем примере используются эти операции -</p>

<blockquote>
<pre>
<code>#include &lt;iostream&gt;

using namespace std;

int main () {
   int  var = 20;   // actual variable declaration.
   int  *ip;        // pointer variable 

   ip = &amp;var;       // store address of var in pointer variable

   cout &lt;&lt; &quot;Value of var variable: &quot;;
   cout &lt;&lt; var &lt;&lt; endl;

   // print the address stored in ip pointer variable
   cout &lt;&lt; &quot;Address stored in ip variable: &quot;;
   cout &lt;&lt; ip &lt;&lt; endl;

   // access the value at the address available in pointer
   cout &lt;&lt; &quot;Value of *ip variable: &quot;;
   cout &lt;&lt; *ip &lt;&lt; endl;

   return 0;
}</code></pre>
</blockquote>

<p>Когда приведенный выше код скомпилирован и исполнен, он производит результат следующим образом:</p>

<blockquote>
<pre>
<code>Value of var variable: 20
Address stored in ip variable: 0xbfc601ac
Value of *ip variable: 20</code></pre>
</blockquote>

<h2>Указатели в C ++</h2>

<p>У указателей есть много, но простых понятий, и они очень важны для программирования на С ++.&nbsp;Существует несколько важных понятий указателей, которые должны быть понятны программисту на C ++ -</p>

<h2>Нулевые указатели</h2>

<p>C ++ поддерживает нулевой указатель, который является константой со значением нуля, определенным в нескольких стандартных библиотеках.</p>

<h2>Арифметика указателей</h2>

<p>Существует четыре арифметических оператора, которые могут использоваться для указателей: ++, -, +, -</p>

<h2>Указатели против массивов</h2>

<p>Существует тесная связь между указателями и массивами.</p>

<h2>Массив указателей</h2>

<p>Вы можете определить массивы для хранения нескольких указателей.</p>

<h2>Указатель на указатель</h2>

<p>C ++ позволяет иметь указатель на указатель и так далее.</p>

<h2>Передача указателей на функции</h2>

<p>Передача аргумента по ссылке или по адресу позволяет включить переданный аргумент, который будет изменен вызывающей функцией вызываемой функцией.</p>

<h2>Возвращаемый указатель из функций</h2>

<p>C ++ позволяет функции возвращать указатель на локальную переменную, статическую переменную и динамически распределенную память.</p>
</div>
