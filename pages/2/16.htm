<h1>C++ - Массивы</h1>

<div class="tutorial-content">
<p>C ++ предоставляет структуру данных,&nbsp;<strong>массив</strong>&nbsp;, в котором хранится последовательный набор фиксированного размера элементов того же типа.&nbsp;Массив используется для хранения коллекции данных, но часто бывает полезно придумать массив как набор переменных того же типа.</p>

<p>Вместо объявления отдельных переменных, таких как number0, number1, ... и number99, вы объявляете одну переменную массива, такую ​​как числа, и используете числа [0], числа [1] и ..., числа [99] для представления отдельные переменные.&nbsp;К конкретному элементу массива обращается индекс.</p>

<p>Все массивы состоят из смежных областей памяти.&nbsp;Нижний адрес соответствует первому элементу и наивысшему адресу последнего элемента.</p>

<h2>Объявление массивов</h2>

<p>Чтобы объявить массив в C ++, программист задает тип элементов и количество элементов, требуемых массивом, следующим образом:</p>

<blockquote>
<pre>
<code>type arrayName [ arraySize ];</code></pre>
</blockquote>

<p>Это называется одноразмерным массивом.&nbsp;<strong>ArraySize</strong>&nbsp;должен быть целое число константы больше нуля и&nbsp;<strong>типа</strong>&nbsp;может быть любым допустимым С ++ типом данных.&nbsp;Например, чтобы объявить 10-элементный массив, называемый балансом типа double, используйте этот оператор -</p>

<blockquote>
<pre>
<code>double balance[10];</code></pre>
</blockquote>

<h2>Инициализация массивов</h2>

<p>Вы можете инициализировать элементы массива C ++ либо по одному, либо используя один оператор следующим образом:</p>

<blockquote>
<pre>
<code>double balance[5] = {1000.0, 2.0, 3.4, 17.0, 50.0};</code></pre>
</blockquote>

<p>Количество значений между фигурными скобками {} не может быть больше числа элементов, которые мы объявляем для массива между квадратными скобками [].&nbsp;Ниже приведен пример назначения одного элемента массива -</p>

<p>Если вы опустите размер массива, будет создан массив, достаточно большой для хранения инициализации.&nbsp;Поэтому, если вы пишете -</p>

<blockquote>
<pre>
<code>double balance[] = {1000.0, 2.0, 3.4, 17.0, 50.0};</code></pre>
</blockquote>

<p>Вы создадите точно такой же массив, как в предыдущем примере.</p>

<blockquote>
<pre>
<code>balance[4] = 50.0;</code></pre>
</blockquote>

<h2>Доступ к элементам массива</h2>

<p>Доступ к элементу осуществляется путем индексации имени массива.&nbsp;Это делается путем размещения индекса элемента в квадратных скобках после имени массива.&nbsp;Например,</p>

<blockquote>
<pre>
<code>double salary = balance[9];</code></pre>
</blockquote>

<p>Вышеприведенный оператор будет принимать 10-&nbsp;й&nbsp;элемент из массива и присваивать значение переменной зарплаты.&nbsp;Ниже приведен пример, который будет использовать все вышеупомянутые три концепции, а именно:&nbsp;объявление, назначение и доступ к массивам -</p>

<blockquote>
<pre>
<code>#include &lt;iostream&gt;
using namespace std;
 
#include &lt;iomanip&gt;
using std::setw;
 
int main () {

   int n[ 10 ]; // n is an array of 10 integers
 
   // initialize elements of array n to 0          
   for ( int i = 0; i &lt; 10; i++ ) {
      n[ i ] = i + 100; // set element at location i to i + 100
   }
   cout &lt;&lt; &quot;Element&quot; &lt;&lt; setw( 13 ) &lt;&lt; &quot;Value&quot; &lt;&lt; endl;
 
   // output each array element&#39;s value                      
   for ( int j = 0; j &lt; 10; j++ ) {
      cout &lt;&lt; setw( 7 )&lt;&lt; j &lt;&lt; setw( 13 ) &lt;&lt; n[ j ] &lt;&lt; endl;
   }
 
   return 0;
}</code></pre>
</blockquote>

<p>Эта программа использует&nbsp;функцию&nbsp;<strong>setw()</strong>&nbsp;для форматирования вывода.&nbsp;Когда приведенный выше код компилируется и выполняется, он производит следующий результат:</p>

<blockquote>
<pre>
<code>Element        Value
      0          100
      1          101
      2          102
      3          103
      4          104
      5          105
      6          106
      7          107
      8          108
      9          109</code></pre>
</blockquote>

<h2>Массивы в C ++</h2>

<p>Массивы важны для C ++ и требуют много деталей.&nbsp;Существует несколько важных понятий, которые должны быть понятны программисту на C ++ -</p>

<h2>Многомерные массивы</h2>

<p>C ++ поддерживает многомерные массивы. Простейшей формой многомерного массива является двумерный массив.</p>

<h2>Указатель на массив</h2>

<p>Вы можете сгенерировать указатель на первый элемент массива, просто указав имя массива без индекса.</p>

<h2>Передача массивов в функции</h2>

<p>Вы можете передать функции указателю на массив, указав имя массива без индекса.</p>

<h2>Возвращать массив из функций</h2>

<p>C ++ позволяет функции возвращать массив.</p>
</div>
