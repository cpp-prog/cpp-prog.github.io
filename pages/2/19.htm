<h1>C++ - Ссылки</h1>

<div class="tutorial-content">
<p>Контрольная переменная - это псевдоним, то есть другое имя для уже существующей переменной.&nbsp;Когда ссылка инициализируется переменной, либо имя переменной, либо имя ссылки могут использоваться для ссылки на переменную.</p>

<h2>Ссылки против указателей</h2>

<p>Ссылки часто путаются с указателями, но три основных различия между ссылками и указателями -</p>

<ul>
	<li>У вас не может быть ссылок NULL.&nbsp;Вы всегда должны иметь возможность предположить, что ссылка связана с законной частью хранилища.</li>
	<li>Когда ссылка инициализируется объектом, ее нельзя изменить, чтобы ссылаться на другой объект.&nbsp;Указатели могут указывать на другой объект в любое время.</li>
	<li>Ссылка должна быть инициализирована, когда она создана.&nbsp;Указатели могут быть инициализированы в любое время.</li>
</ul>

<h2>Создание ссылок на C ++</h2>

<p>Вспомните имя переменной как метку, прикрепленную к местоположению переменной в памяти.&nbsp;Затем вы можете подумать о ссылке в качестве второго ярлыка, прикрепленного к этой ячейке памяти.&nbsp;Таким образом, вы можете получить доступ к содержимому переменной через имя исходной переменной или ссылку.&nbsp;Например, предположим, что мы имеем следующий пример -</p>

<blockquote>
<pre>
<code>int i = 17;</code></pre>
</blockquote>

<p>Мы можем объявить ссылочные переменные для i следующим образом.</p>

<blockquote>
<pre>
<code>int&amp; r = i;</code></pre>
</blockquote>

<p>Прочитайте &amp; в этих объявлениях как&nbsp;<strong>ссылку</strong>&nbsp;.&nbsp;Таким образом, прочитайте первое объявление как &laquo;r - целочисленная ссылка, инициализированная i&raquo;, и прочитайте второе объявление как &laquo;s - двойная ссылка, инициализированная на d&raquo;.&nbsp;В следующем примере используются ссылки на int и double -</p>

<blockquote>
<pre>
<code>#include &lt;iostream&gt;
 
using namespace std;
 
int main () {
   // declare simple variables
   int    i;
   double d;
 
   // declare reference variables
   int&amp;    r = i;
   double&amp; s = d;
   
   i = 5;
   cout &lt;&lt; &quot;Value of i : &quot; &lt;&lt; i &lt;&lt; endl;
   cout &lt;&lt; &quot;Value of i reference : &quot; &lt;&lt; r  &lt;&lt; endl;
 
   d = 11.7;
   cout &lt;&lt; &quot;Value of d : &quot; &lt;&lt; d &lt;&lt; endl;
   cout &lt;&lt; &quot;Value of d reference : &quot; &lt;&lt; s  &lt;&lt; endl;
   
   return 0;
}</code></pre>
</blockquote>

<p>Когда приведенный выше код скомпилирован и выполнен, он производит следующий результат:</p>

<blockquote>
<pre>
<code>Value of i : 5
Value of i reference : 5
Value of d : 11.7
Value of d reference : 11.7</code></pre>
</blockquote>

<p>Ссылки обычно используются для списков аргументов функций и возвращаемых значений функции.&nbsp;Итак, следующие два важных вопроса, связанные с ссылками на C ++, которые должны быть понятны программисту на C ++ -</p>

<h2>Ссылки как параметры</h2>

<p>C ++ поддерживает передачу ссылок в качестве функционального параметра более безопасно, чем параметры.</p>

<h2>Ссылка как возвращаемое значение</h2>

<p>Вы можете вернуть ссылку из функции C ++, как и любой другой тип данных.</p>
</div>
