<h1>C++ - Типы циклов</h1>

<div class="tutorial-content">
<p>Может возникнуть ситуация, когда вам нужно выполнить блок кода несколько раз.&nbsp;В общем случае операторы выполняются последовательно: сначала выполняется первый оператор в функции, затем второй и т. д.</p>

<p>Языки программирования предоставляют различные структуры управления, которые обеспечивают более сложные пути выполнения.&nbsp;Оператор цикла позволяет нам выполнять оператор или группу операторов несколько раз, а следующий является общим из оператора цикла на большинстве языков программирования.</p>

<p>Язык программирования C ++ предоставляет следующие типы циклов для обработки требований цикла.</p>

<table style="width:100%">
	<tbody>
		<tr>
			<th>Цикл</th>
			<th>Описание</th>
		</tr>
		<tr>
			<td><strong>while loop</strong></td>
			<td>
			<p>Повторяет оператор или группу операторов, пока данное условие истинно.&nbsp;Он проверяет состояние перед выполнением тела цикла.</p>
			</td>
		</tr>
		<tr>
			<td><strong>for loop</strong></td>
			<td>Выполнять последовательность операторов несколько раз и аббревиатура кода, управляющего переменной цикла.</td>
		</tr>
		<tr>
			<td><strong>do...while loop</strong></td>
			<td>Как оператор &laquo;while&raquo;, за исключением того, что он проверяет условие в конце тела цикла.</td>
		</tr>
		<tr>
			<td><strong>nested loops</strong></td>
			<td>Вы можете использовать один или несколько циклов внутри любого цикла &laquo;while&raquo;, &laquo;for&raquo; или &laquo;do..while&raquo;.</td>
		</tr>
	</tbody>
</table>

<h2>Записи управление циклом</h2>

<p>Операторы управления циклом изменяют исполнение из своей обычной последовательности.&nbsp;Когда выполнение оставляет область, все автоматические объекты, созданные в этой области, уничтожаются.</p>

<p>C ++ поддерживает следующие управляющие инструкции:</p>

<table style="width:100%">
	<tbody>
		<tr>
			<th>Конструкция</th>
			<th>Описание</th>
		</tr>
		<tr>
			<td><strong>break</strong></td>
			<td>
			<p>Завершает&nbsp;<strong>цикл</strong>&nbsp;или&nbsp;оператор&nbsp;<strong>switch</strong>&nbsp;и передает выполнение в оператор сразу после цикла или переключателя.</p>
			</td>
		</tr>
		<tr>
			<td><strong>continue</strong></td>
			<td>
			<p>Заставляет цикл пропускать остальную часть своего тела и сразу же повторять его условие до повторного повторения.</p>
			</td>
		</tr>
		<tr>
			<td><strong>goto</strong></td>
			<td>
			<p>Передает контроль над заявлением с надписью.&nbsp;Хотя в вашей программе не рекомендуется использовать инструкцию goto.</p>
			</td>
		</tr>
	</tbody>
</table>

<h2>Бесконечный цикл</h2>

<p>Цикл становится бесконечным циклом, если условие никогда не становится ложным.&nbsp;Для&nbsp;цикла традиционно используются для этой цели.&nbsp;Поскольку ни одно из трех выражений, которые образуют цикл &#39;for&#39;, не требуется, вы можете сделать бесконечный цикл, оставив условное выражение пустым.</p>

<blockquote>
<pre>
<code>#include &lt;iostream&gt;
using namespace std;
 
int main () {
   for( ; ; ) {
      printf(&quot;This loop will run forever.\n&quot;);
   }

   return 0;
}</code></pre>
</blockquote>

<p>Когда условное выражение отсутствует, оно считается истинным.&nbsp;У вас может быть выражение инициализации и инкремента, но программисты на C ++ чаще используют конструкцию for (;;) для обозначения бесконечного цикла.</p>
</div>
