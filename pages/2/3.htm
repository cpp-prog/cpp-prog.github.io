<h1>C++ - Базовый синтаксис</h1>

<div class="tutorial-content">
<p>Когда мы рассматриваем программу на C ++, ее можно определить как коллекцию объектов, которые обмениваются данными посредством вызова методов друг друга.&nbsp;Давайте теперь кратко рассмотрим, что означает класс, объект, методы и мгновенные переменные.</p>

<ul>
	<li><strong>Объект.</strong>&nbsp;Объекты имеют состояния и поведение.&nbsp;Пример: у собаки есть состояния - цвет, имя, порода, а также поведение - виляние, лай, еда.&nbsp;Объект является экземпляром класса.</li>
	<li><strong>Класс&nbsp;</strong>. Класс может быть определен как шаблон / план, который описывает поведение / состояния, которые поддерживает объект своего типа.</li>
	<li><strong>Методы</strong>&nbsp;. Метод - это в основном поведение.&nbsp;Класс может содержать много методов.&nbsp;Это в методах, где записываются логики, обрабатываются данные и выполняются все действия.</li>
	<li><strong>Переменные экземпляра</strong>.&nbsp;Каждый объект имеет свой уникальный набор переменных экземпляра.&nbsp;Состояние объекта создается значениями, присвоенными этим переменным экземпляра.</li>
</ul>

<h2>Структура программы на C ++</h2>

<p>Давайте посмотрим на простой код, который будет печатать слова&nbsp;Hello World&nbsp;.</p>

<blockquote>
<pre>
<code>#include &lt;iostream&gt;
using namespace std;

// main() is where program execution begins.
int main() {
   cout &lt;&lt; &quot;Hello World&quot;; // prints Hello World
   return 0;
}</code></pre>
</blockquote>

<p>Давайте рассмотрим различные части вышеуказанной программы -</p>

<ul>
	<li>Язык C ++ определяет несколько заголовков, которые содержат информацию, которая является необходимой или полезной для вашей программы.&nbsp;Для этой программы необходим заголовок&nbsp;<code>&lt;iostream&gt;</code>&nbsp;.</li>
	<li>Строка&nbsp;с использованием пространства имен std;<strong>&nbsp;</strong>сообщает компилятору использовать пространство имен std.&nbsp;Пространства имен являются относительно недавним дополнением к C ++.</li>
	<li>Следующая строка &#39;&nbsp;<code>// main ()</code> - это начало выполнения программы.&nbsp;&#39;- это однострочный комментарий, доступный на C ++.&nbsp;Однострочные комментарии начинаются с // и останавливаются в конце строки.</li>
	<li>Строка&nbsp;<code>int main ()</code>&nbsp;является основной функцией, в которой начинается выполнение программы.</li>
	<li>Следующая строка&nbsp;<code>cout &lt;&lt; &quot;Hello World&quot;;</code><strong>&nbsp;</strong>вызывает на экране сообщение &laquo;Hello World&raquo;.</li>
	<li>Следующая строка&nbsp; <code>return 0</code><strong><code>;</code>&nbsp;</strong>завершает функцию <code>main()</code> и заставляет ее возвращать значение 0 в вызывающий процесс.</li>
</ul>

<h2>Компилировать и выполнять программу на C ++</h2>

<p>Давайте посмотрим, как сохранить файл, скомпилировать и запустить программу.&nbsp;Следуйте приведенным ниже инструкциям -</p>

<ul>
	<li>Откройте текстовый редактор и добавьте код, как указано выше.</li>
	<li>Сохраните файл как: hello.cpp</li>
	<li>Откройте командную строку и перейдите в каталог, в котором вы сохранили файл.</li>
	<li>Введите &#39;g ++ hello.cpp&#39; и нажмите клавишу ввода для компиляции кода.&nbsp;Если в вашем коде нет ошибок, командная строка приведет вас к следующей строке и сгенерирует исполняемый файл a.out.</li>
	<li>Теперь введите <code>&quot;a.out&quot;</code>&nbsp;для запуска вашей программы.</li>
	<li>Вы увидите &quot;Hello World&quot;, напечатанный в окне.</li>
</ul>

<blockquote>
<pre>
<code>$ g++ hello.cpp
$ ./a.out
Hello World</code></pre>
</blockquote>

<p>Убедитесь, что g ++ находится на вашем пути и что вы запускаете его в каталоге, содержащем файл <code>hello.cpp</code>.&nbsp;Вы можете скомпилировать программы C / C ++ с помощью makefile.&nbsp;</p>

<h2>Точки с запятой и блоки в C ++</h2>

<p>В C ++ точка с запятой является терминатором утверждения.&nbsp;То есть каждое отдельное утверждение должно заканчиваться точкой с запятой.&nbsp;Он указывает конец одного логического объекта.&nbsp;Например, следующие три разных утверждения:</p>

<blockquote>
<pre>
<code>x = y;
y = y + 1;
add(x, y);</code></pre>
</blockquote>

<p>Блок представляет собой набор логически связанных операторов, которые окружены открывающимися и закрывающимися фигурными скобками.&nbsp;Например:</p>

<blockquote>
<pre>
<code>{
   cout &lt;&lt; &quot;Hello World&quot;; // prints Hello World
   return 0;
}</code></pre>
</blockquote>

<p>C ++ не распознает конец строки как терминатор.&nbsp;По этой причине не имеет значения, где вы указываете оператор в строке.&nbsp;Например:</p>

<blockquote>
<pre>
<code>x = y;
y = y + 1;
add(x, y);</code></pre>
</blockquote>

<p>такой же как:</p>

<blockquote>
<pre>
<code>x = y; y = y + 1; add(x, y);</code></pre>
</blockquote>

<h2>Идентификаторы C ++</h2>

<p>Идентификатор C ++ - это имя, используемое для идентификации переменной, функции, класса, модуля или любого другого пользовательского элемента.&nbsp;Идентификатор начинается с буквы от A до Z или от a до z или символа подчеркивания <code>(_)</code>, за которым следует ноль или несколько букв, символов подчеркивания и цифр (от 0 до 9).</p>

<p>C ++ не допускает знаков препинания, таких как @, $ и% в идентификаторах.&nbsp;C ++ - это язык программирования с учетом регистра.&nbsp;Таким образом,&nbsp;Manpower&nbsp;и&nbsp;рабочая сила&nbsp;являются двумя разными идентификаторами на C ++.</p>

<p>Вот несколько примеров приемлемых идентификаторов:</p>

<blockquote>
<pre>
<code>mohd       zara    abc   move_name  a_123
myname50   _temp   j     a23b9      retVal</code></pre>
</blockquote>

<h2>Ключевые слова C ++</h2>

<p>Следующий список показывает зарезервированные слова в C ++.&nbsp;Эти зарезервированные слова не могут использоваться как константные или переменные или любые другие имена идентификаторов.</p>

<table style="width:100%">
	<tbody>
		<tr>
			<td>asm</td>
			<td>else</td>
			<td>new</td>
			<td>this</td>
		</tr>
		<tr>
			<td>auto</td>
			<td>enum</td>
			<td>operator</td>
			<td>throw</td>
		</tr>
		<tr>
			<td>bool</td>
			<td>explicit</td>
			<td>private</td>
			<td>true</td>
		</tr>
		<tr>
			<td>break</td>
			<td>export</td>
			<td>protected</td>
			<td>try</td>
		</tr>
		<tr>
			<td>case</td>
			<td>extern</td>
			<td>public</td>
			<td>typedef</td>
		</tr>
		<tr>
			<td>catch</td>
			<td>false</td>
			<td>register</td>
			<td>typeid</td>
		</tr>
		<tr>
			<td>char</td>
			<td>float</td>
			<td>reinterpret_cast</td>
			<td>typename</td>
		</tr>
		<tr>
			<td>class</td>
			<td>for</td>
			<td>return</td>
			<td>union</td>
		</tr>
		<tr>
			<td>const</td>
			<td>friend</td>
			<td>short</td>
			<td>unsigned</td>
		</tr>
		<tr>
			<td>const_cast</td>
			<td>goto</td>
			<td>signed</td>
			<td>using</td>
		</tr>
		<tr>
			<td>continue</td>
			<td>if</td>
			<td>sizeof</td>
			<td>virtual</td>
		</tr>
		<tr>
			<td>default</td>
			<td>inline</td>
			<td>static</td>
			<td>void</td>
		</tr>
		<tr>
			<td>delete</td>
			<td>int</td>
			<td>static_cast</td>
			<td>volatile</td>
		</tr>
		<tr>
			<td>do</td>
			<td>long</td>
			<td>struct</td>
			<td>wchar_t</td>
		</tr>
		<tr>
			<td>double</td>
			<td>mutable</td>
			<td>switch</td>
			<td>while</td>
		</tr>
		<tr>
			<td>dynamic_cast</td>
			<td>namespace</td>
			<td>template</td>
		</tr>
	</tbody>
</table>

<h2>Триграфы</h2>

<p>Несколько символов имеют альтернативное представление, называемое триграфной последовательностью.&nbsp;Триграф представляет собой трехсимвольную последовательность, которая представляет один символ, и последовательность всегда начинается с двух вопросительных знаков. Триграфы расширяются везде, где они появляются, в том числе в строковых литералах и символьных литералах, в комментариях и в директивах препроцессора. Ниже приводятся наиболее часто используемые триграфные последовательности:</p>

<table style="width:100%">
	<tbody>
		<tr>
			<th>Trigraph</th>
			<th>Replacement</th>
		</tr>
		<tr>
			<td>??=</td>
			<td>#</td>
		</tr>
		<tr>
			<td>??/</td>
			<td>\</td>
		</tr>
		<tr>
			<td>??&#39;</td>
			<td>^</td>
		</tr>
		<tr>
			<td>??(</td>
			<td>[</td>
		</tr>
		<tr>
			<td>??)</td>
			<td>]</td>
		</tr>
		<tr>
			<td>??!</td>
			<td>|</td>
		</tr>
		<tr>
			<td>??&lt;</td>
			<td>{</td>
		</tr>
		<tr>
			<td>??&gt;</td>
			<td>}</td>
		</tr>
		<tr>
			<td>??-</td>
			<td>~</td>
		</tr>
	</tbody>
</table>

<p>Все компиляторы не поддерживают триграфы, и им не рекомендуется использовать их из-за их запутанного характера.</p>

<h2>Пробел в C ++</h2>

<p>Строка, содержащая только пробелы, возможно с комментарием, называется пустой строкой, и компилятор C ++ полностью игнорирует ее.</p>

<p>Пробел - это термин, используемый в C ++ для описания пробелов, вкладок, символов новой строки и комментариев.&nbsp;Пробел отделяет одну часть инструкции от другой и позволяет компилятору определить, где начинается один элемент в инструкции, такой как int, и следующий элемент.</p>

<h3>Заявление 1</h3>

<blockquote>
<pre>
<code>int age;</code></pre>
</blockquote>

<p>В приведенном выше утверждении должен быть по крайней мере один пробельный символ (обычно пробел) между int и age, чтобы компилятор мог их отличить.</p>

<h3>Заявление 2</h3>

<blockquote>
<pre>
<code>fruit = apples + oranges;   // Get the total fruit</code></pre>
</blockquote>

<p>В приведенном выше утверждении 2 никакие пробельные символы не нужны между фруктами и =, или между = и яблоками, хотя вы можете включать некоторые, если хотите, для удобства чтения.</p>
</div>
