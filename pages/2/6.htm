<h1>C++ - Типы переменных</h1>

<p>Переменная предоставляет нам именованное хранилище, которое могут манипулировать нашими программами.&nbsp;Каждая переменная в C ++ имеет определенный тип, который определяет размер и расположение памяти переменной;&nbsp;диапазон значений, которые могут быть сохранены в этой памяти;&nbsp;и набор операций, которые могут быть применены к переменной.</p>

<p>Имя переменной может состоять из букв, цифр и символа подчеркивания.&nbsp;Он должен начинаться с буквы или подчеркивания.&nbsp;Буквы верхнего и нижнего регистра различны, потому что C ++ чувствителен к регистру -</p>

<p>Существуют следующие основные типы переменных в C ++:</p>

<table style="width:100%">
	<tbody>
		<tr>
			<td><strong>bool</strong></td>
			<td>
			<p>Сохраняет значение true или false.</p>
			</td>
		</tr>
		<tr>
			<td><strong>char</strong></td>
			<td>
			<p>Обычно один октет (один байт).&nbsp;Это целочисленный тип.</p>
			</td>
		</tr>
		<tr>
			<td><strong>int</strong></td>
			<td>
			<p>Самый естественный размер целого для машины.</p>
			</td>
		</tr>
		<tr>
			<td><strong>float</strong></td>
			<td>
			<p>Значение с плавающей запятой с одиночной точностью.</p>
			</td>
		</tr>
		<tr>
			<td><strong>double</strong></td>
			<td>
			<p>Значение с плавающей запятой с двойной точностью.</p>
			</td>
		</tr>
		<tr>
			<td><strong>void</strong></td>
			<td>
			<p>Представляет отсутствие типа.</p>
			</td>
		</tr>
		<tr>
			<td><strong>wchar_t</strong></td>
			<td>
			<p>Широкий характер.</p>
			</td>
		</tr>
	</tbody>
</table>

<p>C ++ также позволяет определять различные другие типы переменных, которые мы рассмотрим в последующих главах, таких как&nbsp;<code>Enumeration, Pointer, Array, Reference, Data structure</code>&nbsp;и&nbsp;<code>Classes</code>&nbsp;.</p>

<p>В следующем разделе рассказывается, как определять, объявлять и использовать различные типы переменных.</p>

<h2>Определение переменных в C ++</h2>

<p>Определение переменной сообщает компилятору, где и сколько хранилища следует создать для переменной.&nbsp;Определение переменной указывает тип данных и содержит список одной или нескольких переменных этого типа следующим образом:</p>

<blockquote>
<pre>
<code>type variable_list;</code></pre>
</blockquote>

<p>Здесь&nbsp;<code>type&nbsp;</code>должен быть допустимым типом данных C ++, включая char, w_char, int, float, double, bool или любой пользовательский объект и т. д., А&nbsp;<code>variable_list</code>&nbsp;может состоять из одного или нескольких имен идентификаторов, разделенных запятыми.</p>

<blockquote>
<pre>
<code>int    i, j, k;
char   c, ch;
float  f, salary;
double d;</code></pre>
</blockquote>

<p>Линия&nbsp;<code>int i, j, k;&nbsp;</code>оба объявляют и определяют переменные<code> i, j и k;</code>&nbsp;который инструктирует компилятор создавать переменные с именем<code> i, j и k</code> типа <code>int.</code></p>

<p>Переменные могут быть инициализированы (назначены начальное значение) в их объявлении.&nbsp;Инициализатор состоит из знака равенства, за которым следует постоянное выражение следующим образом:</p>

<blockquote>
<pre>
<code>type variable_name = value;</code></pre>

<pre>
<code>extern int d = 3, f = 5;    // declaration of d and f. 
int d = 3, f = 5;           // definition and initializing d and f. 
byte z = 22;                // definition and initializes z. 
char x = &#39;x&#39;;               // the variable x has the value &#39;x&#39;.</code></pre>
</blockquote>

<p>Для определения без инициализатора переменные со статической продолжительностью хранения неявно инициализируются с помощью <code>NULL</code> (все байты имеют значение 0);&nbsp;начальное значение всех других переменных не определено.</p>

<h2>Объявление переменной в C ++</h2>

<p>Объявление переменной обеспечивает уверенность компилятора в том, что существует одна переменная, существующая с заданным типом и именем, чтобы компилятор продолжал следующую компиляцию, не требуя полной информации о переменной.&nbsp;Объявление переменной имеет смысл во время компиляции, компилятор нуждается в определении фактической переменной во время компоновки программы.</p>

<p>Объявление переменной полезно, когда вы используете несколько файлов, и вы определяете свою переменную в одном из файлов, которые будут доступны во время компоновки программы.&nbsp;Вы будете использовать&nbsp;ключевое слово&nbsp;<strong>extern</strong>&nbsp;для объявления переменной в любом месте.&nbsp;Хотя вы можете объявить переменную несколько раз в своей программе на C ++, но ее можно определить только один раз в файле, функцию или блок кода.</p>

<h3>Пример:</h3>

<p>Попробуйте следующий пример, в котором переменная была объявлена ​​сверху, но она была определена внутри основной функции:</p>

<blockquote>
<pre>
<code>#include &lt;iostream&gt;
using namespace std;

// Variable declaration:
extern int a, b;
extern int c;
extern float f;
  
int main () {
   // Variable definition:
   int a, b;
   int c;
   float f;
 
   // actual initialization
   a = 10;
   b = 20;
   c = a + b;
 
   cout &lt;&lt; c &lt;&lt; endl ;

   f = 70.0/3.0;
   cout &lt;&lt; f &lt;&lt; endl ;
 
   return 0;
}</code></pre>
</blockquote>

<p>Когда приведенный выше код компилируется и выполняется, он производит следующий результат:</p>

<blockquote>
<pre>
<code>30
23.3333</code></pre>
</blockquote>

<p>Такая же концепция применяется к объявлению функции, где вы указываете имя функции во время ее объявления, и ее фактическое определение может быть дано в другом месте.&nbsp;Например:</p>

<blockquote>
<pre>
<code>// function declaration
int func();
int main() {
   // function call
   int i = func();
}

// function definition
int func() {
   return 0;
}</code></pre>
</blockquote>

<h2>Lvalues ​​и Rvalues</h2>

<p>В C ++ есть два вида выражений:</p>

<ul>
	<li><code>lvalue </code>- выражения, относящиеся к ячейке памяти, называются выражениями <code>lvalue</code>.&nbsp;Значение l может отображаться как в левой, так и в правой части задания.</li>
	<li><code>rvalue</code>&nbsp;- термин rvalue относится к значению данных, которое хранится на некотором адресе в памяти.&nbsp;Rvalue - это выражение, которое не может иметь назначенное ему значение, что означает, что rvalue может отображаться в правой, но не левой части задания.</li>
</ul>

<p>Переменные являются <code>lvalues</code> ​​и поэтому могут отображаться в левой части задания.&nbsp;Числовые литералы являются значениями r и поэтому не могут быть назначены и не могут появляться с левой стороны.&nbsp;Ниже приведено действительное заявление:</p>

<blockquote>
<pre>
<code>int g = 20;</code></pre>
</blockquote>

<p>Но следующее не является допустимым оператором и генерирует ошибку времени компиляции:</p>

<blockquote>
<pre>
<code>10 = 20;</code></pre>
</blockquote>
