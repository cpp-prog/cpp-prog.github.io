<h1>C ++ - Перегрузка (оператор и функция)</h1>

<div class="tutorial-content">
<p>C ++ позволяет указать более одного определения для&nbsp;<strong>функции</strong>&nbsp;имени или&nbsp;<strong>оператора</strong>&nbsp;в той же области, что называется&nbsp;<strong>функция перегрузки</strong>&nbsp;и&nbsp;<strong>перегрузки операторов</strong>&nbsp;соответственно.</p>

<p>Перегруженное объявление представляет собой объявление, объявленное с тем же именем, что и ранее объявленное объявление в той же области видимости, за исключением того, что обе декларации имеют разные аргументы и, очевидно, другое определение (реализация).</p>

<p>Когда вы вызываете перегруженную&nbsp;<strong>функцию</strong>&nbsp;или&nbsp;<strong>оператор</strong>&nbsp;, компилятор определяет наиболее подходящее определение для использования, сравнивая типы аргументов, которые вы использовали для вызова функции или оператора, с типами параметров, указанными в определениях.&nbsp;Процесс выбора наиболее подходящей перегруженной функции или оператора называется&nbsp;<strong>разрешением перегрузки</strong>&nbsp;.</p>

<h2>Перегрузка функций в C ++</h2>

<p>Вы можете иметь несколько определений для одного и того же имени функции в той же области.&nbsp;Определение функции должно отличаться друг от друга по типам и / или количеству аргументов в списке аргументов.&nbsp;Вы не можете перегружать объявления функций, которые отличаются только возвращаемым типом.</p>

<p>Ниже приведен пример, когда одна и та же функция&nbsp;<strong>print ()</strong>&nbsp;используется для печати разных типов данных -</p>

<blockquote>
<pre>
<code>#include &lt;iostream&gt;
using namespace std;
 
class printData {
   public:
      void print(int i) {
        cout &lt;&lt; &quot;Printing int: &quot; &lt;&lt; i &lt;&lt; endl;
      }
      void print(double  f) {
        cout &lt;&lt; &quot;Printing float: &quot; &lt;&lt; f &lt;&lt; endl;
      }
      void print(char* c) {
        cout &lt;&lt; &quot;Printing character: &quot; &lt;&lt; c &lt;&lt; endl;
      }
};

int main(void) {
   printData pd;
 
   // Call print to print integer
   pd.print(5);
   
   // Call print to print float
   pd.print(500.263);
   
   // Call print to print character
   pd.print(&quot;Hello C++&quot;);
 
   return 0;
}</code></pre>

<p>Когда приведенный выше код компилируется и выполняется, он производит следующий результат:</p>

<pre>
<code>Printing int: 5
Printing float: 500.263
Printing character: Hello C++</code></pre>
</blockquote>

<h2>Перегрузка операторов в C ++</h2>

<p>Вы можете переопределить или перегрузить большинство встроенных операторов, доступных на C ++.&nbsp;Таким образом, программист может также использовать операторы с определенными пользователем типами.</p>

<p>Перегруженные операторы - это функции со специальными именами: ключевое слово &laquo;оператор&raquo;, за которым следует символ для определяемого оператора.&nbsp;Как и любая другая функция, перегруженный оператор имеет тип возврата и список параметров.</p>

<blockquote>
<pre>
<code>Box operator+(const Box&amp;);</code></pre>
</blockquote>

<p>объявляет оператор добавления, который можно использовать для&nbsp;<strong>добавления</strong>&nbsp;двух объектов Box и возвращает конечный объект Box.&nbsp;Большинство перегруженных операторов могут быть определены как обычные функции, не являющиеся членами, или как функции членов класса.&nbsp;В случае, если мы определяем функцию выше как функцию, не являющуюся членом класса, мы должны были бы передать два аргумента для каждого операнда следующим образом:</p>

<blockquote>
<pre>
<code>Box operator+(const Box&amp;, const Box&amp;);</code></pre>
</blockquote>

<p>Ниже приведен пример, показывающий концепцию оператора при загрузке с использованием функции-члена.&nbsp;Здесь объект передается как аргумент, свойства которого будут доступны с помощью этого объекта, к объекту, который вызовет этот оператор, можно получить доступ с помощью&nbsp;<strong>этого</strong>&nbsp;оператора, как описано ниже -</p>

<blockquote>
<pre>
<code>#include &lt;iostream&gt;
using namespace std;

class Box {
   public:
      double getVolume(void) {
         return length * breadth * height;
      }
      void setLength( double len ) {
         length = len;
      }
      void setBreadth( double bre ) {
         breadth = bre;
      }
      void setHeight( double hei ) {
         height = hei;
      }
      
      // Overload + operator to add two Box objects.
      Box operator+(const Box&amp; b) {
         Box box;
         box.length = this-&gt;length + b.length;
         box.breadth = this-&gt;breadth + b.breadth;
         box.height = this-&gt;height + b.height;
         return box;
      }
      
   private:
      double length;      // Length of a box
      double breadth;     // Breadth of a box
      double height;      // Height of a box
};

// Main function for the program
int main() {
   Box Box1;                // Declare Box1 of type Box
   Box Box2;                // Declare Box2 of type Box
   Box Box3;                // Declare Box3 of type Box
   double volume = 0.0;     // Store the volume of a box here
 
   // box 1 specification
   Box1.setLength(6.0); 
   Box1.setBreadth(7.0); 
   Box1.setHeight(5.0);
 
   // box 2 specification
   Box2.setLength(12.0); 
   Box2.setBreadth(13.0); 
   Box2.setHeight(10.0);
 
   // volume of box 1
   volume = Box1.getVolume();
   cout &lt;&lt; &quot;Volume of Box1 : &quot; &lt;&lt; volume &lt;&lt;endl;
 
   // volume of box 2
   volume = Box2.getVolume();
   cout &lt;&lt; &quot;Volume of Box2 : &quot; &lt;&lt; volume &lt;&lt;endl;

   // Add two object as follows:
   Box3 = Box1 + Box2;

   // volume of box 3
   volume = Box3.getVolume();
   cout &lt;&lt; &quot;Volume of Box3 : &quot; &lt;&lt; volume &lt;&lt;endl;

   return 0;
}</code></pre>
</blockquote>

<p>Когда приведенный выше код компилируется и выполняется, он производит следующий результат:</p>

<blockquote>
<pre>
<code>Volume of Box1 : 210
Volume of Box2 : 1560
Volume of Box3 : 5400</code></pre>
</blockquote>

<h2>Перегружаемый / Non-overloadableOperators</h2>

<p>Ниже приведен список операторов, которые могут быть перегружены:</p>

<table>
	<tbody>
		<tr>
			<td>
			<p>+</p>
			</td>
			<td>
			<p>-</p>
			</td>
			<td>
			<p>*</p>
			</td>
			<td>
			<p>/</p>
			</td>
			<td>
			<p>%</p>
			</td>
			<td>
			<p>^</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>&amp;</p>
			</td>
			<td>
			<p>|</p>
			</td>
			<td>
			<p>~</p>
			</td>
			<td>
			<p>!</p>
			</td>
			<td>
			<p>,</p>
			</td>
			<td>
			<p>=</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>&lt;</p>
			</td>
			<td>
			<p>&gt;</p>
			</td>
			<td>
			<p>&lt;=</p>
			</td>
			<td>
			<p>&gt;=</p>
			</td>
			<td>
			<p>++</p>
			</td>
			<td>
			<p>--</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>&lt;&lt;</p>
			</td>
			<td>
			<p>&gt;&gt;</p>
			</td>
			<td>
			<p>==</p>
			</td>
			<td>
			<p>!=</p>
			</td>
			<td>
			<p>&amp;&amp;</p>
			</td>
			<td>
			<p>||</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>+=</p>
			</td>
			<td>
			<p>-=</p>
			</td>
			<td>
			<p>/=</p>
			</td>
			<td>
			<p>%=</p>
			</td>
			<td>
			<p>^=</p>
			</td>
			<td>
			<p>&amp;=</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>|=</p>
			</td>
			<td>
			<p>*=</p>
			</td>
			<td>
			<p>&lt;&lt;=</p>
			</td>
			<td>
			<p>&gt;&gt;=</p>
			</td>
			<td>
			<p>[]</p>
			</td>
			<td>
			<p>()</p>
			</td>
		</tr>
		<tr>
			<td>
			<p>-&gt;</p>
			</td>
			<td>
			<p>-&gt;*</p>
			</td>
			<td>
			<p>new</p>
			</td>
			<td>
			<p>new []</p>
			</td>
			<td>
			<p>delete</p>
			</td>
			<td>
			<p>delete []</p>
			</td>
		</tr>
	</tbody>
</table>

<p>Ниже приведен список операторов, которые не могут быть перегружены:</p>

<table>
	<tbody>
		<tr>
			<td>::</td>
			<td>. *</td>
			<td>,</td>
			<td>?:</td>
		</tr>
	</tbody>
</table>
</div>
