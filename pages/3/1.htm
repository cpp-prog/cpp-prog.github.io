<h1>C ++ - Классы и объекты</h1>

<p>Основной целью программирования на C ++ является добавление ориентации объекта на язык программирования C, а классы - центральная функция C ++, которая поддерживает объектно-ориентированное программирование и часто называется пользовательскими типами.</p>

<p>Класс используется для указания формы объекта и объединяет представление данных и методы для управления этими данными в один аккуратный пакет.&nbsp;Данные и функции внутри класса называются членами класса.</p>

<h2>Определения классов C ++</h2>

<p>Когда вы определяете класс, вы определяете схему для типа данных.&nbsp;Это фактически не определяет какие-либо данные, но определяет определение имени класса, то есть то, что будет состоять из класса класса и какие операции могут выполняться на таком объекте.</p>

<p>Определение класса начинается с&nbsp;<strong>класса</strong>&nbsp;ключевого слова,&nbsp;за которым следует имя класса;&nbsp;и тело класса, заключенное в пару фигурных скобок.&nbsp;Определение класса должно выполняться либо точкой с запятой, либо списком деклараций.&nbsp;Например, мы определили тип данных Box с использованием&nbsp;<strong>класса</strong>&nbsp;ключевого слова&nbsp;следующим образом:</p>

<blockquote>
<pre>
<code>class Box {
   public:
      double length;   // Length of a box
      double breadth;  // Breadth of a box
      double height;   // Height of a box
};</code></pre>
</blockquote>

<p>Ключевое слово&nbsp;<strong>public</strong>&nbsp;определяет атрибуты доступа для членов класса, которые следуют за ним.&nbsp;Доступ к публичному члену можно получить извне класса в пределах области объекта класса.&nbsp;Вы также можете указать членов класса как&nbsp;<strong>частные</strong>&nbsp;или&nbsp;<strong>защищенные,</strong>&nbsp;которые мы обсудим в подразделе.</p>

<h2>Определение объектов C ++</h2>

<p>Класс предоставляет чертежи для объектов, поэтому в основном объект создается из класса.&nbsp;Мы объявляем объекты класса с точно таким же объявлением, что мы объявляем переменные основных типов.&nbsp;Следующие утверждения объявляют два объекта класса Box -</p>

<blockquote>
<pre>
<code>Box Box1;          // Declare Box1 of type Box
Box Box2;          // Declare Box2 of type Box</code></pre>
</blockquote>

<p>Оба объекта Box1 и Box2 будут иметь собственную копию данных.</p>

<h2>Доступ к членам данных</h2>

<p>Доступ к публичным элементам данных объекта класса осуществляется с помощью оператора прямого доступа (.).&nbsp;Давайте попробуем следующий пример, чтобы все было ясно -</p>

<blockquote>
<pre>
<code>#include &lt;iostream&gt;

using namespace std;

class Box {
   public:
      double length;   // Length of a box
      double breadth;  // Breadth of a box
      double height;   // Height of a box
};

int main() {
   Box Box1;        // Declare Box1 of type Box
   Box Box2;        // Declare Box2 of type Box
   double volume = 0.0;     // Store the volume of a box here
 
   // box 1 specification
   Box1.height = 5.0; 
   Box1.length = 6.0; 
   Box1.breadth = 7.0;

   // box 2 specification
   Box2.height = 10.0;
   Box2.length = 12.0;
   Box2.breadth = 13.0;
   
   // volume of box 1
   volume = Box1.height * Box1.length * Box1.breadth;
   cout &lt;&lt; &quot;Volume of Box1 : &quot; &lt;&lt; volume &lt;&lt;endl;

   // volume of box 2
   volume = Box2.height * Box2.length * Box2.breadth;
   cout &lt;&lt; &quot;Volume of Box2 : &quot; &lt;&lt; volume &lt;&lt;endl;
   return 0;
}</code></pre>
</blockquote>

<p>Когда приведенный выше код компилируется и выполняется, он производит следующий результат:</p>

<blockquote>
<pre>
<code>Volume of Box1 : 210
Volume of Box2 : 1560</code></pre>
</blockquote>

<p>Важно отметить, что доступ к закрытым и защищенным элементам невозможен напрямую, используя оператор прямого доступа к члену (.).&nbsp;Мы узнаем, как можно получить доступ к закрытым и защищенным членам.</p>

<h2>Классы и объекты в деталях</h2>

<p>До сих пор у вас есть очень общее представление о C ++ классах и объектах.&nbsp;Существуют и другие интересные концепции, связанные с классами и объектами C ++, которые мы обсудим в следующих подразделах, перечисленных ниже:</p>

<h2>Функции членов класса</h2>

<p>Функция-член класса - это функция, которая имеет определение или ее прототип в определении класса, как и любая другая переменная.</p>

<h2>Модификаторы доступа к классу</h2>

<p>Член класса может быть определен как открытый, закрытый или защищенный. По умолчанию члены будут считаться закрытыми.</p>

<h2>Конструктор и деструктор</h2>

<p>Конструктор класса является специальной функцией в классе, который вызывается при создании нового объекта класса. Деструктор также является специальной функцией, которая вызывается при удалении созданного объекта.</p>

<h2>Копировать конструктор</h2>

<p>Конструктор копирования - это конструктор, который создает объект, инициализируя его объектом того же класса, который был создан ранее.</p>

<h2>Функции друга</h2>

<p>Функция друга разрешает полный доступ к закрытым и защищенным членам класса.</p>

<h2>Встроенные функции</h2>

<p>С помощью встроенной функции компилятор пытается развернуть код в теле функции вместо вызова функции.</p>

<h2>this указатель</h2>

<p>Каждый объект имеет специальный указатель , этот , который указывает на сам объект.</p>

<h2>Указатель на классы C ++</h2>

<p>Указатель на класс выполняется точно так же, как указатель на структуру. На самом деле класс - это просто структура с функциями в нем.</p>

<h2>Статические члены класса</h2>

<p>Оба элемента данных и члены функции класса могут быть объявлены как статические.</p>
