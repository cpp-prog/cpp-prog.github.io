<h1>C ++ - Абстракция данных</h1>

<div class="tutorial-content">
<p>Абстракция данных означает предоставление только важной информации внешнему миру и скрытие их фоновых данных, т. е. Представление необходимой информации в программе без предоставления деталей.</p>

<p>Абстракция данных - это метод программирования (и проектирования), который основан на разделении интерфейса и реализации.</p>

<p>Возьмем один реальный пример телевизора, который вы можете включить и выключить, изменить канал, отрегулировать громкость и добавить внешние компоненты, такие как динамики, видеомагнитофоны и проигрыватели DVD, НО вы не знаете его внутренних деталей, что вы не знаете, как он получает сигналы по воздуху или по кабелю, как он их переводит, и, наконец, отображает их на экране.</p>

<p>Таким образом, мы можем сказать, что телевизор четко отделяет внутреннюю реализацию от внешнего интерфейса, и вы можете играть с его интерфейсами, такими как кнопка питания, сменщик каналов и регулятор громкости, не имея нулевого знания о его внутренних компонентах.</p>

<p>В C ++ классы обеспечивают отличный уровень&nbsp;<strong>абстракции данных</strong>&nbsp;.&nbsp;Они обеспечивают достаточные общественные методы внешнему миру, чтобы играть с функциональностью объекта и манипулировать объектными данными, то есть состоянием, не зная, каким образом класс был реализован внутри страны.</p>

<p>Например, ваша программа может сделать вызов функции&nbsp;<code>sort ()</code><strong>,</strong>&nbsp;не зная, какой алгоритм фактически использует функция для сортировки данных значений.&nbsp;Фактически, базовая реализация функции сортировки может меняться между версиями библиотеки, и пока интерфейс остается прежним, ваш вызов функции будет работать.</p>

<p>В C ++ мы используем&nbsp;<strong>классы</strong>&nbsp;для определения наших собственных абстрактных типов данных (ADT).&nbsp;Вы можете использовать&nbsp;объект&nbsp;<code>cout&nbsp;</code>класса&nbsp;<code>ostream</code>&nbsp;для потоковой передачи данных на стандартный вывод следующим образом:</p>

<blockquote>
<pre>
<code>#include &lt;iostream&gt;
using namespace std;

int main() {
   cout &lt;&lt; &quot;Hello C++&quot; &lt;&lt;endl;
   return 0;
}</code></pre>
</blockquote>

<p>Здесь вам не нужно понимать, как&nbsp;<code>cout</code>&nbsp;отображает текст на экране пользователя.&nbsp;Вам нужно знать только открытый интерфейс, а базовая реализация &laquo;cout&raquo; может быть изменена.</p>

<h2>Доступ к ярлыкам для выполнения абстракции</h2>

<p>В C ++ мы используем метки доступа для определения абстрактного интерфейса для класса.&nbsp;Класс может содержать ноль или более ярлыков доступа -</p>

<ul>
	<li>Члены, определенные с помощью общедоступного ярлыка, доступны для всех частей программы.&nbsp;Представление абстракции данных типа определяется его публичными членами.</li>
	<li>Члены, определенные с помощью частного ярлыка, недоступны для кода, который использует класс.&nbsp;Частные разделы скрывают реализацию от кода, который использует этот тип.</li>
</ul>

<p>Нет ограничений на то, как часто может появляться метка доступа.&nbsp;Каждая метка доступа указывает уровень доступа следующих определений элементов.&nbsp;Указанный уровень доступа остается в силе до тех пор, пока не встретится следующая метка доступа или не увидит закрытие правой скобки тела класса.</p>

<h2>Преимущества абстракции данных</h2>

<p>Абстракция данных обеспечивает два важных преимущества -</p>

<ul>
	<li>Внутренние элементы класса защищены от непреднамеренных ошибок на уровне пользователя, что может привести к повреждению состояния объекта.</li>
	<li>Реализация класса может развиваться со временем в ответ на изменение требований или отчетов об ошибках без изменения кода пользователя.</li>
</ul>

<p>Определяя члены данных только в приватном разделе класса, автор класса может вносить изменения в данные.&nbsp;Если реализация меняется, необходимо изучить только код класса, чтобы увидеть, что может повлиять на изменение.&nbsp;Если данные общедоступны, то любая функция, которая напрямую обращается к элементам данных старого представления, может быть нарушена.</p>

<h2>Пример абстракции данных</h2>

<p>Любая программа на C ++, где вы реализуете класс с общедоступными и частными членами, является примером абстракции данных.&nbsp;Рассмотрим следующий пример:</p>

<blockquote>
<pre>
<code>#include &lt;iostream&gt;
using namespace std;

class Adder {
   public:
      // constructor
      Adder(int i = 0) {
         total = i;
      }
      
      // interface to outside world
      void addNum(int number) {
         total += number;
      }
      
      // interface to outside world
      int getTotal() {
         return total;
      };
      
   private:
      // hidden data from outside world
      int total;
};

int main() {
   Adder a;
   
   a.addNum(10);
   a.addNum(20);
   a.addNum(30);

   cout &lt;&lt; &quot;Total &quot; &lt;&lt; a.getTotal() &lt;&lt;endl;
   return 0;
}</code></pre>

<p>Когда приведенный выше код компилируется и выполняется, он производит следующий результат:</p>

<pre>
<code>Total 60</code></pre>
</blockquote>

<p>Класс выше добавляет числа вместе и возвращает сумму.&nbsp;Публичные участники -&nbsp;<code>addNum</code>&nbsp;и&nbsp;<code>getTotal</code>&nbsp;- это интерфейсы для внешнего мира, и пользователь должен знать их, чтобы использовать класс.&nbsp;Общее&nbsp;<strong>количество пользователей</strong>&nbsp;- это то, о чем пользователю не нужно знать, но необходимо, чтобы класс работал правильно.</p>

<h2>Стратегия проектирования</h2>

<p>Абстракция разделяет код на интерфейс и реализацию.&nbsp;Поэтому при разработке вашего компонента вы должны поддерживать независимый интерфейс от реализации, чтобы при изменении базовой реализации интерфейс оставался неповрежденным.</p>

<p>В этом случае, независимо от того, какие программы используют эти интерфейсы, они не будут затронуты и просто нуждаются в перекомпиляции с последней реализацией.</p>
</div>
