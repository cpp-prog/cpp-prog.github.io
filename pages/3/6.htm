<h1>C ++ - Инкапсуляция данных</h1>

<div class="tutorial-content">
<p>Все программы на C ++ состоят из следующих двух основных элементов:</p>

<ul>
	<li><strong>Программные операторы (код)</strong>&nbsp;- это часть программы, которая выполняет действия, и они называются функциями.</li>
	<li><strong>Данные программы. Данные</strong>&nbsp;- это информация о программе, которая зависит от программных функций.</li>
</ul>

<p>Инкапсуляция представляет собой концепцию объектно-ориентированного программирования, которая связывает данные и функции, которые управляют данными, и которая защищает от внешних помех и неправильного использования.&nbsp;Инкапсуляция данных привела к важной концепции&nbsp;<strong>скрытия данных</strong>&nbsp;ООП&nbsp;.</p>

<p><strong>Инкапсуляция данных</strong>&nbsp;- это механизм объединения данных, а функции, которые их используют, и&nbsp;<strong>абстракция данных</strong>&nbsp;- это механизм разоблачения только интерфейсов и скрытия деталей реализации от пользователя.</p>

<p>C ++ поддерживает свойства инкапсуляции и скрытия данных посредством создания пользовательских типов, называемых&nbsp;<strong>классами</strong>&nbsp;.&nbsp;Мы уже изучили, что класс может содержать&nbsp;<strong>частных, защищенных</strong>&nbsp;и&nbsp;<strong>открытых</strong>&nbsp;членов.&nbsp;По умолчанию все элементы, определенные в классе, являются закрытыми.&nbsp;Например:</p>

<blockquote>
<pre>
<code>class Box {
   public:
      double getVolume(void) {
         return length * breadth * height;
      }

   private:
      double length;      // Length of a box
      double breadth;     // Breadth of a box
      double height;      // Height of a box
};</code></pre>
</blockquote>

<p>Длина переменных, ширина и высота являются&nbsp;<strong>частными</strong>&nbsp;.&nbsp;Это означает, что к ним могут обращаться только другие члены класса Box, а не к какой-либо другой части вашей программы.&nbsp;Это один из способов инкапсуляции.</p>

<p>Чтобы сделать части класса&nbsp;<strong>общедоступными</strong>&nbsp;(то есть доступными для других частей вашей программы), вы должны объявить их после&nbsp;ключевого слова&nbsp;<strong>public</strong>&nbsp;.&nbsp;Все переменные или функции, определенные после публичного спецификатора, доступны всеми другими функциями вашей программы.</p>

<p>Создание одного класса другом другого предоставляет детали реализации и уменьшает инкапсуляцию.&nbsp;Идеал состоит в том, чтобы сохранить как можно больше деталей каждого класса, скрытых от всех других классов.</p>

<h2>Пример инкапсуляции данных</h2>

<p>Любая программа на C ++, где вы реализуете класс с общедоступными и частными членами, является примером инкапсуляции данных и абстракции данных.&nbsp;Рассмотрим следующий пример:</p>

<blockquote>
<pre>
<code>#include &lt;iostream&gt;
using namespace std;

class Adder {
   public:
      // constructor
      Adder(int i = 0) {
         total = i;
      }
      
      // interface to outside world
      void addNum(int number) {
         total += number;
      }
      
      // interface to outside world
      int getTotal() {
         return total;
      };
   
   private:
      // hidden data from outside world
      int total;
};

int main() {
   Adder a;
   
   a.addNum(10);
   a.addNum(20);
   a.addNum(30);

   cout &lt;&lt; &quot;Total &quot; &lt;&lt; a.getTotal() &lt;&lt;endl;
   return 0;
}</code></pre>
</blockquote>

<p>Когда приведенный выше код компилируется и выполняется, он производит следующий результат:</p>

<blockquote>
<pre>
<code>Total 60</code></pre>
</blockquote>

<p>Класс выше добавляет числа вместе и возвращает сумму.&nbsp;Публичные пользователи&nbsp;<code>addNum</code>&nbsp;и&nbsp;<code>getTotal</code>&nbsp;являются интерфейсами для внешнего мира, и пользователь должен знать их, чтобы использовать класс.&nbsp;Частный член&nbsp;<strong>общий</strong>&nbsp;является то ,&nbsp;что скрыто от внешнего мира, но необходимо для класса ,&nbsp;чтобы работать должным образом.</p>

<h2>Стратегия проектирования</h2>

<p>Большинство из нас научились делать членов класса закрытыми по умолчанию, если нам действительно не нужно их раскрывать.&nbsp;Это просто хорошая&nbsp;<strong>инкапсуляция</strong>&nbsp;.</p>

<p>Это чаще всего применяется к членам данных, но в равной степени относится ко всем членам, включая виртуальные функции.</p>
</div>
