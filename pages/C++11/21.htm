<h1>Многопоточность C++11</h1>

<p>В новом стандарте C++11 многопоточность осуществлена в классе thread, который определен в файле thread.h. Для того чтобы создать новый поток нужно создать объект класса thread и инициализировать передав в конструктор имя функции которая должна выполнятся в потоке. Давайте посмотрим на маленький пример &nbsp;многопоточной программы чтобы все стало понятнее.</p>

<pre>
<code>#include&lt;iostream&gt;&nbsp;
#include&lt;thread&gt;&nbsp;//Файл&nbsp;в&nbsp;котором&nbsp;определен&nbsp;класс&nbsp;thread&nbsp;
&nbsp;
using&nbsp;namespace&nbsp;std;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;anyFunc()&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;cout&lt;&lt;&quot;thread&nbsp;function&quot;;&nbsp;
}&nbsp;
&nbsp;
int&nbsp;main()&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;thread&nbsp;func_thread(anyFunc);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;&nbsp;
}</code></pre>

<div>В этой программе создается новый объект класса thread и в объявлении конструктору передается имя функции anyFunc, который печатает на экране текст &quot;thread function&quot;. Но если скомпилировать данное приложение и запустить, то как бы странно не было оно закончится аварийна с сообщением об ошибке. Все дело в том что главная функция программы main создает объект func_thread, с параметром конструктора anyFunc и продолжает свое выполнение не дожидаясь чтобы процесс закончился, что и вызывает ошибку времени выполнения. Чтобы ошибки не было надо чтобы до того как закончится функция main все потоки были закончены. Это осуществляется путем синхронизации потоков вызывая метод join. Метод join возвращает выполнение программе когда поток заканчивается, после чего объект класса thread можно безопасно уничтожить.&nbsp;</div>

<pre>
<code>#include&lt;iostream&gt;&nbsp;
#include&lt;thread&gt;&nbsp;//Файл&nbsp;в&nbsp;котором&nbsp;определен&nbsp;класс&nbsp;thread&nbsp;
using&nbsp;namespace&nbsp;std;&nbsp;
&nbsp;
void&nbsp;anyFunc()&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;thread&nbsp;function&quot;;&nbsp;
}&nbsp;
&nbsp;
int&nbsp;main()&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;thread&nbsp;func_thread(anyFunc);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;func_thread.join();&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Выполнение&nbsp;возвращается&nbsp;функции&nbsp;main&nbsp;когда&nbsp;поток&nbsp;заканчивается&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;&nbsp;
}</code></pre>

<div>Позвольте добавить что перед вызовом функции join надо проверить является ли объект joinable то есть представляет он реальный поток или нет, к примеру объект может быть объявлен но не инициализирован или уже закончен вызовом функции join. Проверка делается функцией joinable, который возвращает true в случае если объект представляет исполняемый поток и false в противном случаи. Надо отметить что может быть ситуация когда нам ненужно ждать чтобы поток закончился, для этого у класса thread есть другой метод по имени detach. Оба метода ничего не принимают &nbsp;и не возвращают и после их вызова объект становится not joinable и можно безопасно уничтожить.</div>

<pre>
<code>#include&lt;iostream&gt;&nbsp;
#include&lt;thread&gt;&nbsp;//Файл&nbsp;в&nbsp;котором&nbsp;определен&nbsp;класс&nbsp;thread&nbsp;
using&nbsp;namespace&nbsp;std;&nbsp;
&nbsp;
void&nbsp;anyFunc()&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;thread&nbsp;function&quot;;&nbsp;
}&nbsp;
&nbsp;
int&nbsp;main()&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;thread&nbsp;func_thread(anyFunc);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(func_thread.joinable())&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;func_thread.join();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Выполнение&nbsp;возвращается&nbsp;функции&nbsp;main&nbsp;когда&nbsp;поток&nbsp;заканчивается&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;func_thread.detach();&nbsp;В&nbsp;этом&nbsp;случае&nbsp;поток&nbsp;заканчивается&nbsp;принудительно&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;&nbsp;
}</code></pre>

<div>В инициализацию объекта можно и передать параметры в функции перечисляя их после имени функции как продемонстрировано в следующем примере:</div>

<pre>
<code>#include&lt;iostream&gt;&nbsp;
#include&lt;thread&gt;&nbsp;//Файл&nbsp;в&nbsp;котором&nbsp;определен&nbsp;класс&nbsp;thread&nbsp;
using&nbsp;namespace&nbsp;std;&nbsp;
&nbsp;
void&nbsp;printStr(char&nbsp;*&nbsp;str)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;str&nbsp;&lt;&lt;&nbsp;&#39;\n&#39;;&nbsp;
}&nbsp;
&nbsp;
void&nbsp;printArray(int&nbsp;a[],const&nbsp;int&nbsp;len)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;len;&nbsp;i++)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;a[i]&nbsp;&lt;&lt;&nbsp;&#39;&nbsp;&#39;;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
}&nbsp;
&nbsp;
int&nbsp;main()&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;char*&nbsp;str&nbsp;=&nbsp;&quot;thread&nbsp;function&nbsp;with&nbsp;parametrs&quot;;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;int&nbsp;len&nbsp;=&nbsp;8;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;arr[len]&nbsp;=&nbsp;{12,&nbsp;45,&nbsp;-34,&nbsp;57,&nbsp;678,&nbsp;89,&nbsp;0,&nbsp;1};&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Передаем&nbsp;параметр&nbsp;функции&nbsp;во&nbsp;время&nbsp;инициализации&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;thread&nbsp;func_thread(printStr,&nbsp;str);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Параметров&nbsp;может&nbsp;быть&nbsp;много&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;thread&nbsp;func_thread2(printArray,&nbsp;arr,&nbsp;len);&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(func_thread.joinable())&nbsp;func_thread.join();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(func_thread2.joinable())&nbsp;func_thread2.join();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;&nbsp;
}</code></pre>

<div>Параметры можно передавать не только по значению но и по ссылке. Для чего воспользуемся функцией ref из пространстве имен std. В ниже приведенной программе вызываемому потоку передается массив и его длина, а в потоке в него добавляются 5 новых значений.</div>

<pre>
<code>#include&lt;iostream&gt;&nbsp;
#include&lt;cstdlib&gt;&nbsp;
#include&lt;thread&gt;&nbsp;
using&nbsp;namespace&nbsp;std;&nbsp;
&nbsp;
void&nbsp;addElements(int&nbsp;a[],&nbsp;int&nbsp;&amp;len)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;len;&nbsp;i&nbsp;&lt;&nbsp;len&nbsp;+&nbsp;5;&nbsp;i++)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[i]&nbsp;=&nbsp;rand();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;len&nbsp;+=&nbsp;5;&nbsp;
}&nbsp;
&nbsp;
int&nbsp;main()&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;int&nbsp;LENGTH&nbsp;=&nbsp;20;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;arr[LENGTH]&nbsp;=&nbsp;{1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5},&nbsp;current_length&nbsp;=&nbsp;5;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;Output&nbsp;the&nbsp;array&nbsp;before&nbsp;thread\n&quot;;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;current_length;&nbsp;i++)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;arr[i]&nbsp;&lt;&lt;&nbsp;&#39;&nbsp;&#39;;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;thread&nbsp;arr_thread(addElements,&nbsp;arr,&nbsp;current_length);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(arr_thread.joinable())&nbsp;arr_thread.join();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;\nOutput&nbsp;th&nbsp;array&nbsp;after&nbsp;thread\n&quot;;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;current_length;&nbsp;i++)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;arr[i]&nbsp;&lt;&lt;&nbsp;&#39;&nbsp;&#39;;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;&nbsp;
}</code></pre>

<p>Потоки могут быть инициализированны не только функцией но и функцией объекта: метод operator() или обычным открытым методом класса. В первом случае нужно передать объект этого класса в конструктор thread, а во втором случае ссылку на функцию и адрес объекта, конечно не надо забыть про список параметров если они есть.</p>

<pre>
<code>#include&lt;iostream&gt;&nbsp;
#include&lt;thread&gt;&nbsp;
using&nbsp;namespace&nbsp;std;&nbsp;
&nbsp;
class&nbsp;arrayModifier&nbsp;{&nbsp;
public:&nbsp;
&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;operator()(int&nbsp;a[],&nbsp;int&nbsp;len)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;len;&nbsp;i++)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[i]&nbsp;*=&nbsp;2;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;invers(int&nbsp;a[],&nbsp;int&nbsp;len)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;len;&nbsp;i++)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[i]&nbsp;*=&nbsp;-1;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
};&nbsp;
&nbsp;
int&nbsp;main()&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;int&nbsp;length&nbsp;=&nbsp;5;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;arr[length]&nbsp;=&nbsp;{1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5};&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;arrayModifier&nbsp;obj;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;Output&nbsp;the&nbsp;array&nbsp;before&nbsp;threads\n&quot;;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;length;&nbsp;i++)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;arr[i]&nbsp;&lt;&lt;&nbsp;&#39;&nbsp;&#39;;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Инициализируется&nbsp;объект&nbsp;функцией&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;thread&nbsp;arr_thread(obj,&nbsp;arr,&nbsp;length);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Инициализируется&nbsp;обычным&nbsp;открытым&nbsp;методом&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;thread&nbsp;arr_thread2(&amp;arrayModifier::invers,&nbsp;&amp;obj,&nbsp;arr,&nbsp;length);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(arr_thread.joinable())&nbsp;arr_thread.join();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(arr_thread2.joinable())&nbsp;arr_thread2.join();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;\nOutput&nbsp;th&nbsp;array&nbsp;after&nbsp;threads\n&quot;;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;length;&nbsp;i++)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;arr[i]&nbsp;&lt;&lt;&nbsp;&#39;&nbsp;&#39;;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;&nbsp;
}</code></pre>

<div>В вышеприведенном примере у класса arrayModifier есть два метода первый это operator(), который умножает элементы массива на 2, а второй умножает на -1.</div>

<h2>ID потока</h2>

<div>&nbsp; &nbsp;У каждого потока есть свой уникальный номер который отличается от других потоков этой программы. Для этого в классе thread есть закрытый член id и открытый метод get_id вызов которого возвращает значение этого члена.</div>

<pre>
<code>#include&lt;iostream&gt;&nbsp;
#include&lt;cstdlib&gt;&nbsp;
#include&lt;thread&gt;&nbsp;
using&nbsp;namespace&nbsp;std;&nbsp;
&nbsp;
class&nbsp;printNumber&nbsp;{&nbsp;
public:&nbsp;
&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;operator()(int&nbsp;number,int&nbsp;arr[],int&nbsp;idx)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;sum&nbsp;=&nbsp;0;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;number;&nbsp;i++)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(1%15&nbsp;==&nbsp;0)&nbsp;continue;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(i%3&nbsp;==&nbsp;0)&nbsp;sum&nbsp;+=&nbsp;3*i;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(i%5&nbsp;==&nbsp;0)&nbsp;sum&nbsp;+=&nbsp;5*i;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[idx]&nbsp;=&nbsp;sum;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
};&nbsp;
&nbsp;
int&nbsp;main()&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;int&nbsp;length&nbsp;=&nbsp;10;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;thread::id&nbsp;id;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;thread&nbsp;thread_array[length];&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;res_arr[length]&nbsp;=&nbsp;{0};&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;length;&nbsp;i++)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thread_array[i]&nbsp;=&nbsp;thread(printNumber(),&nbsp;rand(),res_arr,i);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;length;&nbsp;i++)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(thread_array[i].joinable())&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id&nbsp;=&nbsp;thread_array[i].get_id();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thread_array[i].join();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;Thread&nbsp;with&nbsp;id&nbsp;&quot;&nbsp;&lt;&lt;&nbsp;id&nbsp;&lt;&lt;&nbsp;&quot;&nbsp;finished.&nbsp;With&nbsp;result&nbsp;&quot;&lt;&lt;res_arr[i]&lt;&lt;&quot;\n&quot;;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;&nbsp;
}</code></pre>

<h2>Пространство имен this_thread</h2>

<div>&nbsp; &nbsp; В заголовочном файле thread.h определено пространство имен this_thread который содержит в себе функции для работы с конкретным потоком. Три из этих функций для того чтобы на некоторое время остановить выполнение потока: sleep_until - передается переменная класса chrono:time_point и блокируется выполнение потока пока системные часы не дойдут до этого времени; sleep_for - передается переменная класса chrono::duration и выполнение потока блокируется пока не прошло столько времени сколько было преданно; yield - останавливает выполнение потока на некоторое время предоставляя возможность выполнится другим потокам. А четвертая функция это get_id &nbsp;и как метод класса thread возвращает id потока.</div>

<pre>
<code>#include&lt;iostream&gt;&nbsp;
#include&lt;sstream&gt;&nbsp;
#include&lt;chrono&gt;&nbsp;
#include&lt;thread&gt;&nbsp;
using&nbsp;namespace&nbsp;std;&nbsp;
&nbsp;
class&nbsp;printNumber&nbsp;{&nbsp;
public:&nbsp;
&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;operator()()&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ostringstream&nbsp;out;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thread::id&nbsp;id&nbsp;=&nbsp;this_thread::get_id();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out&nbsp;&lt;&lt;&nbsp;&quot;Thread&nbsp;with&nbsp;id&nbsp;&quot;&nbsp;&lt;&lt;&nbsp;id&nbsp;&lt;&lt;&nbsp;&quot;&nbsp;started\n&quot;;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;out.str();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Останавливает&nbsp;выполнение&nbsp;на&nbsp;одну&nbsp;секунду&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this_thread::sleep_for(chrono::seconds(1));&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.str(&quot;&quot;);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out&nbsp;&lt;&lt;&nbsp;&quot;Thread&nbsp;with&nbsp;id&nbsp;&quot;&nbsp;&lt;&lt;&nbsp;id&nbsp;&lt;&lt;&nbsp;&quot;&nbsp;finished\n&quot;;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;out.str();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
};&nbsp;
&nbsp;
int&nbsp;main()&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;int&nbsp;length&nbsp;=&nbsp;10;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;thread&nbsp;thread_array[length];&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;length;&nbsp;i++)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thread_array[i]&nbsp;=&nbsp;thread(printNumber());&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;length;&nbsp;i++)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(thread_array[i].joinable())&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thread_array[i].join();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;&nbsp;
}</code></pre>

<h2>Одновременный доступ к ресурсам</h2>

<div>&nbsp;</div>

<div>&nbsp; &nbsp; В вышеприведенном примере для печати на экран я использовал sstream, предварительно превращая в строку то что хочу печатать а потом передаю в поток вывода. А что если сразу передать в поток вывода, сперва первую строку, потом переменную типа thread::id и наконец вторую строку. Но в этом случае потоки не по очереди будут передавать в поток вывода и в итога получается совсем не то что мы хотели. Такая ситуация бывает когда несколько потоков работают с одним и тем же объектом. Для того чтобы предотвратить это воспользуемся классом mutex который определен в файле mutex. Переменная типа mutex можно блокировать и разблокировать. Когда вызывается метод lock класса mutex, метод проверяет объект и если он разблокирован то блокирует его и возвращает выполнение, в противном случае оно ждет пока объект разблокируется и после чего делает то же самое. А метод unlock разблокирует объект класса mutex этим позволяя другим процессам его блокировать.</div>

<pre>
<code>#include&lt;iostream&gt;&nbsp;
#include&lt;cstdlib&gt;&nbsp;
#include&lt;vector&gt;&nbsp;
#include&lt;mutex&gt;&nbsp;
#include&lt;thread&gt;&nbsp;
using&nbsp;namespace&nbsp;std;&nbsp;
&nbsp;
const&nbsp;int&nbsp;elementsCount&nbsp;=&nbsp;10;&nbsp;
&nbsp;
void&nbsp;push(vector&lt;int&gt;&nbsp;&amp;arr,&nbsp;mutex&amp;&nbsp;m_arr,&nbsp;mutex&amp;&nbsp;m_out)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;num;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;elementsCount;&nbsp;i++)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_arr.lock();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num&nbsp;=&nbsp;rand();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr.push_back(num);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_arr.unlock();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_out.lock();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;Push&nbsp;&quot;&nbsp;&lt;&lt;&nbsp;num&nbsp;&lt;&lt;&nbsp;&quot;\n&quot;;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_out.unlock();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
}&nbsp;
&nbsp;
void&nbsp;pop(vector&lt;int&gt;&nbsp;&amp;arr,&nbsp;mutex&amp;&nbsp;m_arr,&nbsp;mutex&amp;&nbsp;m_out)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;0,&nbsp;num;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i&nbsp;&lt;&nbsp;elementsCount)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_arr.lock();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(arr.size()&nbsp;&gt;&nbsp;0)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num&nbsp;=&nbsp;arr.back();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr.pop_back();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_out.lock();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;Pop&nbsp;&quot;&nbsp;&lt;&lt;&nbsp;num&nbsp;&lt;&lt;&nbsp;&quot;\n&quot;;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_out.unlock();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_arr.unlock();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
}&nbsp;
&nbsp;
int&nbsp;main()&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;mutex&nbsp;m_arr,&nbsp;m_out;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;int&gt;&nbsp;vec;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;thread&nbsp;push_thread(push,&nbsp;ref(vec),&nbsp;ref(m_arr),&nbsp;ref(m_out));&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;thread&nbsp;pop_thread(pop,&nbsp;ref(vec),&nbsp;ref(m_arr),&nbsp;ref(m_out));&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(push_thread.joinable())&nbsp;push_thread.join();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(pop_thread.joinable())&nbsp;pop_thread.join();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;&nbsp;
}</code></pre>

<div>В вышеприведенной программе мы создаем два объекта класса thread первый инициализируем функцией push, который добавляет в вектор 10 элементов блокируя и разблокируя объекты m_arr и m_out, а второй функцией pop, который удаляет 10 элементов из вектора, конечно опять блокируя и разблокируя объекты m_arr и m_out.</div>
